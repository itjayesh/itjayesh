#include <lpc17xx.h>
#include <stdio.h>

// --- Pin Definitions ---

// LCD Pins (Connected via CNAD) - These remain the same
#define LCD_D4  (1 << 4)  // P0.4
#define LCD_D5  (1 << 5)  // P0.5
#define LCD_D6  (1 << 6)  // P0.6
#define LCD_D7  (1 << 7)  // P0.7
#define LCD_RS  (1 << 10) // P0.10
#define LCD_EN  (1 << 12) // P0.12
#define LCD_PINS ((LCD_D4)|(LCD_D5)|(LCD_D6)|(LCD_D7)|(LCD_RS)|(LCD_EN))

// --- NEW: Push Button Pins (Connected via CNB3) ---
#define BTN_BJP   (1 << 10) // SW3 on P2.10
#define BTN_CONG  (1 << 11) // SW4 on P2.11
#define BTN_LOCAL (1 << 12) // SW5 on P2.12
#define BTN_NOTA  (1 << 13) // SW6 on P2.13
#define BTN_ADMIN_STAR (1 << 0) // SW7 on P2.0 (Note: Using a different P2 pin)
#define BTN_ADMIN_HASH (1 << 1) // SW8 on P2.1 (Note: Using a different P2 pin)
#define BUTTON_PINS ((BTN_BJP)|(BTN_CONG)|(BTN_LOCAL)|(BTN_NOTA)|(BTN_ADMIN_STAR)|(BTN_ADMIN_HASH))


// Other Peripherals
#define BUZZER_PIN (1 << 26) // P0.26
#define LED_PIN    (1 << 2)  // P2.2 (Changed to avoid conflict with buttons)

// --- Global Variables ---
unsigned int vote_count[4] = {0, 0, 0, 0};
const char* candidate_names[] = {"BJP", "Congress", "Local Party", "NOTA"};
volatile int is_polling_active = 0;
volatile int poll_ended = 0;


// --- Function Prototypes ---
void delay_ms(unsigned int ms);
void lcd_init(void);
void lcd_cmd(unsigned char cmd);
void lcd_data(unsigned char data);
void lcd_puts(const char *str);
void lcd_gotoxy(int x, int y);
void lcd_clear(void);

// MODIFIED: Button functions
void buttons_init(void);
char get_button_press(void);

void buzzer_beep(void);
void ready_led(int state);
void display_options(void);
void cast_vote(char key);
void display_results(void);

// --- Main Program ---
int main(void) {
    char key;
    SystemInit();

    // Initialize all hardware
    lcd_init();
    buttons_init(); // Use new button init
    LPC_GPIO0->FIODIR |= BUZZER_PIN;
    LPC_GPIO2->FIODIR |= LED_PIN;   
    ready_led(0); 

    lcd_puts("   EVM Ready  ");
    lcd_gotoxy(1, 2);
    lcd_puts("Press * to Start");

    while (1) {
        key = get_button_press(); // Use new get button function

        if (key != 0) {
            // Admin: Start/Stop Poll (SW7)
            if (key == '*') {
                if (!poll_ended) {
                    is_polling_active = !is_polling_active;
                    if (is_polling_active) {
                        display_options();
                        ready_led(1);
                    } else {
                        poll_ended = 1;
                        is_polling_active = 0;
                        lcd_clear();
                        lcd_puts(" Poll Ended. ");
                        lcd_gotoxy(1, 2);
                        lcd_puts("Press # for results");
                        ready_led(0);
                    }
                }
            }
            // Admin: Display Results (SW8)
            else if (key == '#' && poll_ended) {
                display_results();
            }
            // Voter: Cast Vote (SW3-SW6)
            else if (is_polling_active && (key >= '1' && key <= '4')) {
                cast_vote(key);
                display_options();
            }
        }
    }
}

// --- Function Implementations ---

// NEW: Initialize button pins as inputs
void buttons_init(void) {
    LPC_GPIO2->FIODIR &= ~BUTTON_PINS;
}

// REPLACED: This function reads individual buttons instead of a matrix
char get_button_press(void) {
    // Buttons are active-low (pressing connects them to ground)
    if (!(LPC_GPIO2->FIOPIN & BTN_BJP))   { delay_ms(50); return '1'; }
    if (!(LPC_GPIO2->FIOPIN & BTN_CONG))  { delay_ms(50); return '2'; }
    if (!(LPC_GPIO2->FIOPIN & BTN_LOCAL)) { delay_ms(50); return '3'; }
    if (!(LPC_GPIO2->FIOPIN & BTN_NOTA))  { delay_ms(50); return '4'; }
    if (!(LPC_GPIO2->FIOPIN & BTN_ADMIN_STAR)) { delay_ms(50); return '*'; }
    if (!(LPC_GPIO2->FIOPIN & BTN_ADMIN_HASH)) { delay_ms(50); return '#'; }
    
    return 0; // No button pressed
}

void delay_ms(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 2000; j++);
    }
}

// --- All LCD, Buzzer, and Application Logic functions remain the same as before ---
// (lcd_init, lcd_cmd, lcd_data, lcd_puts, lcd_gotoxy, lcd_clear)
// (buzzer_beep, ready_led, display_options, cast_vote, display_results)
// NOTE: For brevity, I am not repeating all the unchanged functions here.
// Please copy them from the previous response.
void lcd_init(void) {
    LPC_GPIO0->FIODIR |= LCD_PINS;
    delay_ms(50);
    lcd_cmd(0x02); lcd_cmd(0x28); lcd_cmd(0x0C);
    lcd_cmd(0x06); lcd_cmd(0x01); delay_ms(10);
}
void lcd_cmd(unsigned char cmd) {
    LPC_GPIO0->FIOCLR = LCD_PINS; LPC_GPIO0->FIOCLR = LCD_RS;
    LPC_GPIO0->FIOSET = (cmd & 0xF0); LPC_GPIO0->FIOSET = LCD_EN; delay_ms(2); LPC_GPIO0->FIOCLR = LCD_EN;
    LPC_GPIO0->FIOSET = (cmd & 0x0F) << 4; LPC_GPIO0->FIOSET = LCD_EN; delay_ms(2); LPC_GPIO0->FIOCLR = LCD_EN;
    delay_ms(5);
}
void lcd_data(unsigned char data) {
    LPC_GPIO0->FIOCLR = LCD_PINS; LPC_GPIO0->FIOSET = LCD_RS;
    LPC_GPIO0->FIOSET = (data & 0xF0); LPC_GPIO0->FIOSET = LCD_EN; delay_ms(2); LPC_GPIO0->FIOCLR = LCD_EN;
    LPC_GPIO0->FIOSET = (data & 0x0F) << 4; LPC_GPIO0->FIOSET = LCD_EN; delay_ms(2); LPC_GPIO0->FIOCLR = LCD_EN;
    delay_ms(5);
}
void lcd_puts(const char *str) { while (*str) lcd_data(*str++); }
void lcd_gotoxy(int x, int y) { lcd_cmd((y == 1) ? (0x80 + x - 1) : (0xC0 + x - 1)); }
void lcd_clear(void) { lcd_cmd(0x01); delay_ms(10); }
void buzzer_beep(void) { LPC_GPIO0->FIOSET = BUZZER_PIN; delay_ms(150); LPC_GPIO0->FIOCLR = BUZZER_PIN; }
void ready_led(int state) { if (state) LPC_GPIO2->FIOSET = LED_PIN; else LPC_GPIO2->FIOCLR = LED_PIN; }
void display_options(void) {
    lcd_clear();
    lcd_puts("1:BJP   2:CONG");
    lcd_gotoxy(1, 2);
    lcd_puts("3:LOCAL 4:NOTA");
}
void cast_vote(char key) {
    int candidate_index = key - '1';
    if (candidate_index >= 0 && candidate_index < 4) {
        ready_led(0);
        vote_count[candidate_index]++;
        lcd_clear();
        lcd_puts(" Vote Cast To: ");
        lcd_gotoxy(1, 2);
        lcd_puts(candidate_names[candidate_index]);
        buzzer_beep();
        delay_ms(2000);
        ready_led(1);
    }
}
void display_results(void) {
    char buffer1[17], buffer2[17];
    lcd_clear();
    sprintf(buffer1, "BJP:%d CONG:%d", vote_count[0], vote_count[1]);
    sprintf(buffer2, "LOCAL:%d NOTA:%d", vote_count[2], vote_count[3]);
    lcd_puts(buffer1);
    lcd_gotoxy(1, 2);
    lcd_puts(buffer2);
}
