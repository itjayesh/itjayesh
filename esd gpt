#include "LPC17xx.h"
#include <stdint.h>

/* ===================== Pin Config ===================== */
#define LCD_RS 15
#define LCD_EN 16
#define LCD_D4 17
#define LCD_D5 18
#define LCD_D6 19
#define LCD_D7 20

#define BTN_BJP      0   // SW1
#define BTN_CONG     1   // SW2
#define BTN_LOCAL    2   // SW3
#define BTN_NOTA     3   // SW4

#define BIT(x) (1u<<(x))

volatile uint32_t g_ms = 0;

/* ===================== SysTick ===================== */
void SysTick_Handler(void){ g_ms++; }

void DelayMs(uint32_t ms){
    uint32_t start = g_ms;
    while((g_ms - start) < ms);
}

void Init_Systick(void){
    SystemCoreClockUpdate();
    SysTick_Config(SystemCoreClock/1000);
}

/* ===================== GPIO ===================== */
void GPIO_SetDirOut(uint8_t port, uint8_t pin){
    (&LPC_GPIO0)[port].FIODIR |= BIT(pin);
}
void GPIO_SetDirIn(uint8_t port, uint8_t pin){
    (&LPC_GPIO0)[port].FIODIR &= ~BIT(pin);
}
void GPIO_Write(uint8_t port, uint8_t pin, uint8_t val){
    if(val) (&LPC_GPIO0)[port].FIOSET = BIT(pin);
    else    (&LPC_GPIO0)[port].FIOCLR = BIT(pin);
}
uint8_t GPIO_Read(uint8_t port, uint8_t pin){
    return (uint8_t)(((&LPC_GPIO0)[port].FIOPIN >> pin) & 1u);
}
void GPIO_EnablePullup(uint8_t port,uint8_t pin){
    volatile uint32_t *reg;
    uint8_t idx=(pin/16)*2,pos=(pin%16)*2;
    if(port==0) reg=&LPC_PINCON->PINMODE0+idx;
    else if(port==1) reg=&LPC_PINCON->PINMODE2+idx;
    else if(port==2) reg=&LPC_PINCON->PINMODE4+idx;
    else reg=&LPC_PINCON->PINMODE6+idx;
    *reg &= ~(3u<<(pos));
}

/* ===================== LCD ===================== */
void LCD_PulseEnable(void){
    GPIO_Write(0,LCD_EN,1);
    for(volatile int i=0;i<200;i++);
    GPIO_Write(0,LCD_EN,0);
    for(volatile int i=0;i<200;i++);
}
void LCD_Write4(uint8_t n){
    GPIO_Write(0,LCD_D4,(n>>0)&1);
    GPIO_Write(0,LCD_D5,(n>>1)&1);
    GPIO_Write(0,LCD_D6,(n>>2)&1);
    GPIO_Write(0,LCD_D7,(n>>3)&1);
    LCD_PulseEnable();
}
void LCD_Command(uint8_t c){
    GPIO_Write(0,LCD_RS,0);
    LCD_Write4(c>>4);
    LCD_Write4(c&0x0F);
    DelayMs(2);
}
void LCD_Data(uint8_t d){
    GPIO_Write(0,LCD_RS,1);
    LCD_Write4(d>>4);
    LCD_Write4(d&0x0F);
}
void LCD_Init(void){
    GPIO_SetDirOut(0,LCD_RS);
    GPIO_SetDirOut(0,LCD_EN);
    GPIO_SetDirOut(0,LCD_D4);
    GPIO_SetDirOut(0,LCD_D5);
    GPIO_SetDirOut(0,LCD_D6);
    GPIO_SetDirOut(0,LCD_D7);
    GPIO_Write(0,LCD_RS,0);
    GPIO_Write(0,LCD_EN,0);
    DelayMs(40);
    LCD_Write4(0x03); DelayMs(5);
    LCD_Write4(0x03); DelayMs(5);
    LCD_Write4(0x03); DelayMs(1);
    LCD_Write4(0x02);
    LCD_Command(0x28);
    LCD_Command(0x0C);
    LCD_Command(0x01); DelayMs(2);
    LCD_Command(0x06);
}
void LCD_Clear(void){ LCD_Command(0x01); DelayMs(2); }
void LCD_Goto(uint8_t r,uint8_t c){ LCD_Command(0x80 | (r?0x40:0)+c); }
void LCD_Print(const char*s){ while(*s) LCD_Data(*s++); }

/* ===================== Buttons ===================== */
void Buttons_Init(void){
    for(int i=0;i<4;i++){
        GPIO_SetDirIn(2,i);
        GPIO_EnablePullup(2,i);
    }
}
uint8_t Button_Pressed(uint8_t pin){
    return (GPIO_Read(2,pin)==0);
}

/* ===================== App logic ===================== */
void LCD_PrintMenu(void){
    LCD_Clear();
    LCD_Goto(0,0); LCD_Print("1:BJP 2:Cong");
    LCD_Goto(1,0); LCD_Print("3:Local 4:NOTA");
}
void LCD_ShowVote(const char*who){
    LCD_Clear();
    LCD_Goto(0,0); LCD_Print("You voted:");
    LCD_Goto(1,0); LCD_Print(who);
    DelayMs(900);
    LCD_PrintMenu();
}
void Init_All(void){
    SystemInit();
    Init_Systick();
    LCD_Init();
    Buttons_Init();
}

/* ===================== Main ===================== */
int main(void){
    Init_All();
    LCD_Clear();
    LCD_Goto(0,0); LCD_Print("EVM Ready");
    LCD_Goto(1,0); LCD_Print("Press Button");
    DelayMs(800);
    LCD_PrintMenu();

    while(1){
        if(Button_Pressed(BTN_BJP)){    LCD_ShowVote("BJP");      while(Button_Pressed(BTN_BJP)); }
        if(Button_Pressed(BTN_CONG)){   LCD_ShowVote("Congress"); while(Button_Pressed(BTN_CONG)); }
        if(Button_Pressed(BTN_LOCAL)){  LCD_ShowVote("Local");    while(Button_Pressed(BTN_LOCAL)); }
        if(Button_Pressed(BTN_NOTA)){   LCD_ShowVote("NOTA");     while(Button_Pressed(BTN_NOTA)); }
    }
}
